{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACI,sBAAMC,SAXW,SAAAC,GACjBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAnBc,SAAAP,GACtBF,EAAcE,EAAEQ,OAAOF,a,+BCLlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAaZM,GAbY,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAGhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KA2BA,OAtBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAKkB,EACLL,SAAQ,SAM1B,CAACpB,IASIqB,ED1BsBK,CAAa1B,GAA9ByB,EAAZ,EAAOlB,KAAWa,EAAlB,EAAkBA,QAclB,OACA,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAElDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,YAAf,SAGYS,EAAKhB,KAAK,SAAAC,GAAG,OACT,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEOlBgB,EApCM,WAEjB,MAAoCzC,mBAAS,CAAC,UAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAQA,OACA,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAG5B,uBAEA,6BAEQ2C,EAAWnB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,Y,MCpB7B6B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.e7dd555d.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport propTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({setCategories}) => { //Estoy recibiendo setCategories de GifExpertApp\r\n    const [inputValue, setinputValue] = useState(\"\");\r\n\r\n    const handleInputChange = e => { //e = evento\r\n        setinputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault(); //Esto es para que no haga refresh de la página\r\n\r\n        if(inputValue.trim().length > 2){\r\n\r\n            setCategories(cats => [inputValue,...cats]);\r\n            setinputValue(\"\");\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: propTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=rrwqikV7aEw0bmhguePxgcoH7JaKEkFY`; //encodeURI reemplaza los espacios por %20 entre otras cosas\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url //Con el signo ? pregunto que si vienen las imagenes, entonces que lo utilice\r\n        }\r\n    })\r\n\r\n    return gifs; //regresa una promesa que resuelve la colección de mis imagenes al ser async\r\n}","import React from 'react'\r\n\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(id,title,url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react' \r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setimages] = useState([]);\r\n    const {data:imgs, loading} = useFetchGifs(category);\r\n\r\n    \r\n    // useEffect(() => { //El useEfect permite ejecutar cierto código de manera condicional\r\n    //     getGifs(category)\r\n    //         .then(setimages);\r\n    // },[category]); //como primer parametro recibe una función y como segundo param recibe un arreglo de dependencia\r\n    //si lo dejo vacío significa que el useEffect se va a ejecutar una única vez\r\n    //En este caso si la categoria cambia va a volver a ejecutar el efecto de getGifs\r\n\r\n    \r\n\r\n    // getGifs();\r\n\r\n    return (\r\n    <>\r\n        <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n        {loading && <p className=\"animate__animated animate__flash\">Loading...</p>}\r\n\r\n        <div className=\"card-grid\">\r\n            \r\n                {\r\n                    imgs.map( img => \r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img} //De esta manera estoy mandando cada una de las propiedades del img como una prop independiente\r\n                         />) \r\n                    // <li key={id}>{title}</li>)\r\n                }\r\n            \r\n        </div>\r\n    </>\r\n    )\r\n}\r\n","//Custom hook\r\nimport { useEffect, useState } from \"react\"\r\nimport {getGifs} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category) => { //Los custom hooks funcionan como si fueran functional components\r\n\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading:true\r\n    });\r\n\r\n    useEffect(() => { //1.se hace el efecto para que cambie solo cuando cambia la categoria\r\n        getGifs(category) //2. hace la petición http\r\n            .then(imgs => { //3. tenemos las imgs\r\n                \r\n                // setTimeout(() => {//4. se pone el timeout para que quede un poco más lento\r\n                    setState({ //5. cuando ya tenemos la data se llama al setState cambiando la información de data y loading\r\n                        data:imgs,\r\n                        loading:false\r\n                    })\r\n                    \r\n                // }, 500);\r\n\r\n            })\r\n    },[category]);\r\n\r\n    // setTimeout(() => {\r\n    //     setState({\r\n    //         data:[1,2,3,4,5],\r\n    //     loading:false\r\n    //     })\r\n    // }, 3000);\r\n\r\n    return state; //retorna {data:[], loading:true}\r\n\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState([\"Messi\"]);\r\n\r\n    // const handleAdd = () => {\r\n    //     // setCategories([...categories,\"HunterXHunter\"]);\r\n    //     setCategories(cats => [...cats,\"HunterXHunter\"]); //El setCategories recibe un callback en cual el primer\r\n    //     //argumento es el valor del estado anterior (cats) y luego tiene que regresar el nuevo estado ([...cats,\"HunterXHunter\"])\r\n    // }\r\n\r\n    return (\r\n    <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setCategories={setCategories}/> \r\n        {/* Lo que envie acá lo voy a recibir en las props de AddCategory */}\r\n\r\n        <hr />\r\n\r\n        <ol>\r\n            {\r\n                categories.map(category => \r\n                    <GifGrid\r\n                        key={category}\r\n                        category={category}                    \r\n                    />\r\n                    )\r\n                // <li key={category}>{category}</li>) //El map me sirve para transformar cada elemento en el arreglo\r\n                //Category va a tomar el valor de cada posición de categories y modificar su valor por medio de return\r\n                //El map recibe dos argumentos: Category (elemento del array) y el indice (0,1,2,etc)\r\n                //La Key sirve para saber que elemento está iterando\r\n            }\r\n        </ol>\r\n    </>\r\n    );\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}